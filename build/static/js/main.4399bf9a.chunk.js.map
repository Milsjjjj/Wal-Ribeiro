{"version":3,"sources":["pages/Home.jsx","assets/logo.png","pages/Login.jsx","assets/client-bg.jpeg","pages/ClientPage.jsx","pages/AddWorkout.jsx","pages/AdminPage.jsx","components/ImageGallery.jsx","components/categories.jsx","pages/ManageClient.jsx","data/clientsDB.js","App.jsx","index.js"],"names":["Home","clients","setClients","useState","name","setName","email","setEmail","password","setPassword","navigate","useNavigate","useEffect","fetch","then","res","json","data","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","newClient","id","Date","now","createdAt","toISOString","active","method","headers","body","JSON","stringify","clienteSalvo","prev","type","placeholder","value","onChange","target","required","map","client","days","Math","floor","style","color","marginLeft","fontSize","concat","toLocaleDateString","background","padding","border","borderRadius","cursor","fontWeight","onClick","c","_objectSpread","alert","disabled","handleClientClick","clientId","handleRemoveClient","filter","Login","_ref","adminCredentials","error","setError","src","logo","alt","find","daysOfWeek","ClientPage","workouts","setWorkouts","useParams","parseInt","console","log","bioimpedanceResults","setBioimpedanceResults","weight","bodyFat","muscleMass","visceralFat","waterPercentage","basalMetabolicRate","bioimpedanceHistory","setBioimpedanceHistory","timers","setTimers","completed","setCompleted","currentClient","setCurrentClient","showOptions","setShowOptions","showBioimpedance","setShowBioimpedance","selectedDay","setSelectedDay","optionsRef","useRef","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","updated","textAlign","getWorkoutKey","workout","day","category","isMobile","window","innerWidth","backgroundImage","clientBg","backgroundSize","minHeight","position","top","right","zIndex","ref","boxShadow","minWidth","listStyle","margin","width","marginBottom","display","justifyContent","gap","transition","slice","exam","idx","date","height","alignSelf","w","length","key","description","marginTop","gif","objectFit","interval","setInterval","clearInterval","startTimer","boxSizing","AddWorkout","selectedCategory","setSelectedCategory","daysWithWorkouts","setDaysWithWorkouts","includes","handleDaySelection","toUpperCase","abdomen","bíceps","_client$workouts","isChecked","some","replace","checked","handleToggleWorkout","gifName","updatedClients","workoutData","AdminPage","ImageGallery","onSelect","clientWorkouts","alreadyAdded","marginRight","categories","aerobico","antebraço","costas","glúteos","ombros","panturrilhas","peito","pernas","trapézio","tríceps","ManageClient","availableWorkouts","setAvailableWorkouts","workoutDescription","setWorkoutDescription","_client$workouts2","handleBioimpedanceChange","categorias","Object","keys","_Fragment","_categories$e$target$","workoutsList","image","workoutWithDay","cat","treinosDaCategoria","charAt","findIndex","workoutToRemove","updatedWorkouts","handleRemoveWorkout","clientsDB","AppContent","location","useLocation","pathname","Routes","Route","path","element","App","saved","localStorage","getItem","parse","setItem","Router","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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ACEyC,QAASA,IAAM4H,EAAShE,GACxBxD,SAAU0H,EACV1I,MAAO,CACLM,WAAYoI,EAAe,QAAU,UACrCzI,MAAO,OACPS,OAAQgI,EAAe,UAAY,UACnCnI,QAAS,UACTJ,SAAU,SACVwI,YAAa,OACbzK,SAEDwK,EAAe,QAAU,WAG5BvK,cAAA,QAAMF,UAAU,eAAcC,SAAEsG,EAAQtH,OAExCiB,cAAA,OACEuD,IAAK8C,EAAQoC,IACbhF,IAAK4C,EAAQtH,KACbe,UAAU,gBACV+B,MAAO,CAAE2F,MAAO,GAAIU,OAAQ,GAAInG,WAAY,OAvBvCsE,EAAQtH,WCRlB,MAAM0L,EAAa,CACxBC,SAAU,CACR,sBACA,gBACA,kBACA,oBAEFlB,QAAS,CACP,2BACA,wBACA,0BACA,oCACA,4BACA,wBACA,wBACA,yBACA,wBACA,qBACA,qBACA,wBACA,yBAEFmB,eAAW,CACT,oBACA,gCACA,iCACA,0BACA,oBACA,4BACA,oCAEFlB,YAAQ,CACN,eACA,mCACA,oBACA,sBACA,sBACA,wBACA,yBACA,sBACA,kBACA,uBACA,mBACA,qBAEFmB,OAAQ,CACN,0BACA,iBACA,yBACA,gBACA,oBACA,mBACA,uBACA,qBACA,qBACA,wBAEFC,aAAS,CACP,wBACA,gCACA,4BACA,0BACA,0BACA,oBACA,mCACA,gCACA,yBACA,sBAEFC,OAAQ,CACN,uCACA,6BACA,gCACA,mCACA,uCACA,0CACA,sCACA,0CACA,uCACA,sCACA,iBAEFC,aAAc,CACZ,mCACA,qCACA,+BACA,yCACA,0CACA,4CAEFC,MAAO,CACL,gBACA,4BACA,gBACA,4BACA,mCACA,uBACA,wBACA,kBACA,2BAEFC,OAAQ,CACN,aACA,0BACA,yBACA,uBACA,wBACA,0BACA,0BACA,2BACA,wBACA,0CACA,2BACA,gBACA,gCACA,iCACA,mBACA,aAEFC,cAAU,CACR,oCACA,wCACA,6BACA,kCACA,yBACA,yBACA,+BACA,8BAEFC,aAAS,CACP,sBACA,6BACA,6BACA,+BACA,+BACA,oBACA,oBACA,kCACA,qCACA,wBACA,w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","file":"static/js/main.4399bf9a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Componente principal da página Home para gerenciar clientes\nconst Home = () => {\n    const [clients, setClients] = useState([]);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        fetch('http://localhost:3001/api/clients') // ou use seu IP, se acessar de outro dispositivo\n            .then(res => res.json())\n            .then(data => setClients(data));\n    }, []);\n\n    // Função para adicionar um novo cliente\n    const handleAddClient = (e) => {\n        e.preventDefault();\n\n        // Cria objeto do novo cliente\n        const newClient = {\n            id: Date.now(),\n            name,\n            email,\n            password,\n            createdAt: new Date().toISOString(),\n            active: true\n        };\n\n        fetch('http://localhost:3001/api/clients', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(newClient)\n        })\n          .then(res => res.json())\n          .then(clienteSalvo => setClients(prev => [...prev, clienteSalvo]));\n\n        // Limpa os campos do formulário\n        setName('');\n        setEmail('');\n        setPassword('');\n    };\n\n    // Função para acessar página de gerenciamento do cliente\n    const handleClientClick = (clientId) => {\n        navigate(`/manage-client/${clientId}`);\n    };\n\n    // Função para remover cliente da lista\n    const handleRemoveClient = (clientId) => {\n        setClients(clients.filter(client => client.id !== clientId));\n    };\n\n    return (\n        <div className=\"home-container\">\n            {/* Título da página */}\n            <h1 className=\"home-title\">Manage Clients</h1>\n\n            {/* Seção para adicionar clientes */}\n            <div className=\"form-container\">\n                <h2>Add New Client</h2>\n                <form onSubmit={handleAddClient} className=\"add-client-form\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Client Name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        required\n                    />\n                    <input\n                        type=\"email\"\n                        placeholder=\"Client Email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Client Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                    />\n                    <button type=\"submit\">Add Client</button>\n                </form>\n            </div>\n\n            {/* Seção para listar clientes */}\n            <div className=\"clients-container\">\n                <h2>Clients List</h2>\n                <ul className=\"client-list\">\n                    {clients.map((client) => {\n                        // Calcula dias desde o cadastro do cliente\n                        const days = client.createdAt\n                          ? Math.floor((Date.now() - new Date(client.createdAt)) / (1000 * 60 * 60 * 24))\n                          : 0;\n                        return (\n                          <li key={client.id} className=\"client-item\">\n                            {/* Nome do cliente, vermelho se passou de 45 dias */}\n                            <span style={{ color: days > 45 ? 'red' : 'inherit' }}>\n                              {client.name}\n                            </span>\n                            {/* Data de cadastro */}\n                            <span style={{ marginLeft: 8, fontSize: '0.9rem' }}>\n                              {client.createdAt\n                                ? `Cadastro: ${new Date(client.createdAt).toLocaleDateString()}`\n                                : ''}\n                            </span>\n                            {/* Botão para renovar contrato se passou de 45 dias */}\n                            {days > 45 && (\n                              <button\n                                style={{\n                                  background: '#28a745',\n                                  color: '#fff',\n                                  padding: '2px 8px',\n                                  border: 'none',\n                                  borderRadius: '4px',\n                                  marginLeft: '8px',\n                                  cursor: 'pointer',\n                                  fontWeight: 'bold',\n                                  fontSize: '0.85rem'\n                                }}\n                                onClick={() => {\n                                  setClients(clients.map(c =>\n                                    c.id === client.id\n                                      ? { ...c, createdAt: new Date().toISOString() }\n                                      : c\n                                  ));\n                                  alert('Contrato renovado por mais 45 dias!');\n                                }}\n                              >\n                                Renovar\n                              </button>\n                            )}\n                            {/* Botão para acessar gerenciamento do cliente */}\n                            <button\n                              disabled={days > 45 && !client.active}\n                              onClick={() => handleClientClick(client.id)}\n                            >\n                              Acessar\n                            </button>\n                            {/* Botão para remover cliente */}\n                            <button\n                              className=\"remove-button\"\n                              onClick={() => handleRemoveClient(client.id)}\n                            >\n                              Remover\n                            </button>\n                          </li>\n                        );\n                    })}\n                </ul>\n                <ul>\n                  {clients.map(client => (\n                    <li key={client.id}>\n                      {client.name} - {client.email}\n                    </li>\n                  ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","export default __webpack_public_path__ + \"static/media/logo.ac456e59.png\";","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport logo from '../assets/logo.png';\r\nimport '../styles/main.css';\r\n\r\n// Componente de Login recebe lista de clientes e credenciais do admin\r\nconst Login = ({ clients, adminCredentials }) => {\r\n  // Estados para email, senha e mensagem de erro\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  // Função chamada ao enviar o formulário de login\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Verifica se é o administrador\r\n    if (email === adminCredentials.email && password === adminCredentials.password) {\r\n      navigate('/home'); // Redireciona para a página Home\r\n      return;\r\n    }\r\n\r\n    // Verifica se é um cliente\r\n    const client = clients.find(\r\n      (client) => client.email === email && client.password === password\r\n    );\r\n\r\n    if (client) {\r\n      navigate(`/client/${client.id}`); // Redireciona para a página do cliente\r\n    } else {\r\n      setError('E-mail ou senha inválidos'); // Exibe erro se não encontrar usuário\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      {/* Logo do sistema */}\r\n      <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n      <h1>Bioimpedância Vida Fitness</h1>\r\n      <div className=\"login-box\">\r\n        <h2>Entrar</h2>\r\n        {/* Exibe mensagem de erro se houver */}\r\n        {error && <p className=\"error\">{error}</p>}\r\n        {/* Formulário de login */}\r\n        <form onSubmit={handleLogin} className=\"login-form\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"E-mail\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Senha\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n          />\r\n          <button type=\"submit\">Entrar</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","export default __webpack_public_path__ + \"static/media/client-bg.654cec16.jpeg\";","// Importa hooks do React e funções de navegação do React Router\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n// Importa imagem de fundo do cliente\r\nimport clientBg from '../assets/client-bg.jpeg';\r\n\r\n// Dias da semana para seleção visual\r\nconst daysOfWeek = [\r\n    'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira',\r\n    'Sexta-feira', 'Sábado', 'Domingo'\r\n];\r\n\r\n// Componente da página do cliente\r\nconst ClientPage = ({ clients, setClients, workouts, setWorkouts }) => {\r\n    // Obtém o ID do cliente da URL\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    // Busca o cliente pelo ID\r\n    const client = clients.find((client) => client.id === parseInt(id));\r\n    console.log('Cliente recebido:', client);\r\n\r\n    // Estado para resultados de bioimpedância do cliente\r\n    const [bioimpedanceResults, setBioimpedanceResults] = useState({\r\n        weight: '',\r\n        bodyFat: '',\r\n        muscleMass: '',\r\n        visceralFat: '',\r\n        waterPercentage: '',\r\n        basalMetabolicRate: '',\r\n    });\r\n\r\n    // Estado para o histórico de bioimpedância\r\n    const [bioimpedanceHistory, setBioimpedanceHistory] = useState(client?.bioimpedanceHistory || []);\r\n\r\n    // Estado para cronômetros individuais dos treinos\r\n    const [timers, setTimers] = useState({});\r\n    const [completed, setCompleted] = useState({});\r\n\r\n    // Estado para o cliente atual (atualiza se a lista de clientes mudar)\r\n    const [currentClient, setCurrentClient] = useState(() =>\r\n        clients.find((client) => client.id === parseInt(id))\r\n    );\r\n\r\n    // Estado para controle da exibição das opções\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [showBioimpedance, setShowBioimpedance] = useState(false); // NOVO: controla exibição da caixa\r\n    const [selectedDay, setSelectedDay] = useState(daysOfWeek[0]); // Dia selecionado pelo usuário\r\n\r\n    // Ref para caixa de opções\r\n    const optionsRef = useRef(null);\r\n\r\n    // Fecha caixa de opções ao clicar fora\r\n    useEffect(() => {\r\n        function handleClickOutside(event) {\r\n            if (optionsRef.current && !optionsRef.current.contains(event.target)) {\r\n                setShowOptions(false);\r\n            }\r\n        }\r\n        if (showOptions) {\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n        } else {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        }\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [showOptions]);\r\n\r\n    // Atualiza o cliente atual quando a lista de clientes muda\r\n    useEffect(() => {\r\n        const updated = clients.find((c) => c.id === parseInt(id));\r\n        setCurrentClient(updated);\r\n    }, [clients, id]);\r\n\r\n    // Função para iniciar o cronômetro de descanso de 45s para o treino de índice idx\r\n    const startTimer = (workout) => {\r\n        const key = getWorkoutKey(workout);\r\n        if (timers[key]) return;\r\n        setTimers((prev) => ({ ...prev, [key]: 60 }));\r\n        const interval = setInterval(() => {\r\n            setTimers((prev) => {\r\n                if (prev[key] > 1) {\r\n                    return { ...prev, [key]: prev[key] - 1 };\r\n                } else {\r\n                    clearInterval(interval);\r\n                    setCompleted((c) => ({ ...c, [key]: true }));\r\n                    return { ...prev, [key]: 0 };\r\n                }\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    // Atualiza os resultados de bioimpedância ao digitar\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setBioimpedanceResults((prevResults) => ({\r\n            ...prevResults,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    // Salva os resultados de bioimpedância no cliente\r\n    const handleSave = () => {\r\n        const newExam = {\r\n            ...bioimpedanceResults,\r\n            date: new Date().toISOString(),\r\n        };\r\n        const updatedHistory = [\r\n            newExam,\r\n            ...(client.bioimpedanceHistory || [])\r\n        ].slice(0, 3); // mantém só os 3 mais recentes\r\n\r\n        const updatedClients = clients.map((c) =>\r\n            c.id === client.id\r\n                ? { ...c, bioimpedanceHistory: updatedHistory }\r\n                : c\r\n        );\r\n        setClients(updatedClients);\r\n        alert('Resultados de bioimpedância salvos com sucesso!');\r\n    };\r\n\r\n    // Marca treino como concluído e inicia descanso\r\n    const handleCompleteWorkout = (workout) => {\r\n        setCompletedWorkouts((prev) => [...prev, workout]);\r\n        setTimeout(() => {\r\n            alert('60 segundos de descanso concluídos!');\r\n        }, 60000); // 60 segundos\r\n    };\r\n\r\n    // Adiciona treino ao cliente\r\n    const handleAddWorkout = (workout) => {\r\n        const workoutWithDay = { ...workout, day: selectedDay };\r\n        const updatedClients = clients.map((c) =>\r\n            c.id === client.id ? { ...c, workouts: [...c.workouts, workoutWithDay] } : c\r\n        );\r\n        setClients(updatedClients);\r\n        setWorkouts([...workouts, workoutWithDay]);\r\n        alert('Treino adicionado com sucesso!');\r\n    };\r\n\r\n    // Remove treino do cliente\r\n    const handleRemoveWorkout = (workoutToRemove) => {\r\n        const updatedWorkouts = client.workouts.filter(\r\n            w =>\r\n                !(w.name === workoutToRemove.name &&\r\n                    w.day === workoutToRemove.day &&\r\n                    w.category === workoutToRemove.category)\r\n        );\r\n        setClients(clients.map(c =>\r\n            c.id === client.id ? { ...c, workouts: updatedWorkouts } : c\r\n        ));\r\n    };\r\n\r\n    // Adiciona novo cliente (não utilizado nesta página)\r\n    const handleAddClient = (e) => {\r\n        e.preventDefault();\r\n        const newClient = {\r\n            id: Date.now(),\r\n            name,\r\n            email,\r\n            password,\r\n            createdAt: new Date().toISOString(),\r\n            active: true,\r\n            backgroundImage: '/src/assets/client-bg.jpeg'\r\n        };\r\n        setClients([...clients, newClient]);\r\n    };\r\n\r\n    // Se não encontrar o cliente, exibe mensagem\r\n    if (!client) {\r\n        return <h1>Client not found</h1>;\r\n    }\r\n\r\n    // BLOQUEIO DE ACESSO: se passou de 45 dias desde o cadastro, bloqueia\r\n    if (client?.createdAt) {\r\n        const days = Math.floor((Date.now() - new Date(client.createdAt)) / (1000 * 60 * 60 * 24));\r\n        if (days > 45) {\r\n            return (\r\n                <div className=\"client-page\">\r\n                    <h1 style={{ color: 'red', textAlign: 'center' }}>\r\n                        Acesso bloqueado! Procure o administrador para renovar seu contrato.\r\n                    </h1>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    // Função para gerar uma chave única para cada treino (usada para identificação no estado)\r\n    const getWorkoutKey = (workout) =>\r\n        `${workout.name}-${workout.day}-${workout.category || ''}`;\r\n\r\n    // Verifica se é dispositivo móvel\r\n    const isMobile = window.innerWidth <= 600;\r\n\r\n    // Renderização da página do cliente\r\n    return (\r\n        <div\r\n            className=\"client-page\"\r\n            style={{\r\n                backgroundImage: `url(${clientBg})`,\r\n                backgroundSize: 'cover',\r\n                minHeight: '100vh',\r\n                position: 'relative'\r\n            }}\r\n        >\r\n            {/* Botão de opções no canto superior direito */}\r\n            <div style={{ position: 'absolute', top: 24, right: 24, zIndex: 20 }}>\r\n                <button\r\n                    onClick={() => setShowOptions(!showOptions)}\r\n                    style={{\r\n                        padding: '8px 12px',\r\n                        borderRadius: '6px',\r\n                        background: '#007bff',\r\n                        color: '#fff',\r\n                        border: 'none',\r\n                        cursor: 'pointer',\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    Mais opções\r\n                </button>\r\n                {/* Caixa de opções */}\r\n                {showOptions && (\r\n                    <div\r\n                        ref={optionsRef}\r\n                        style={{\r\n                            position: 'absolute',\r\n                            top: 40,\r\n                            right: 0,\r\n                            background: '#fff',\r\n                            border: '1px solid #ccc',\r\n                            borderRadius: '8px',\r\n                            boxShadow: '0 2px 8px rgba(0,0,0,0.12)',\r\n                            padding: '16px',\r\n                            minWidth: '220px',\r\n                            zIndex: 30\r\n                        }}\r\n                    >\r\n                        <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\r\n                            <li>\r\n                                <button\r\n                                    style={{ width: '100%', padding: '8px', marginBottom: '8px' }}\r\n                                    onClick={() => {\r\n                                        setShowBioimpedance(true);\r\n                                        setShowOptions(false);\r\n                                    }}\r\n                                >\r\n                                    Bioimpedância\r\n                                </button>\r\n                            </li>\r\n                            <li>\r\n                                <button\r\n                                    style={{ width: '100%', padding: '8px', marginBottom: '8px' }}\r\n                                    onClick={() => navigate(`/client-profile/${client.id}`)}\r\n                                >\r\n                                    Foto Perfil\r\n                                </button>\r\n                            </li>\r\n                            <li>\r\n                                <button\r\n                                    style={{ width: '100%', padding: '8px', marginBottom: '8px' }}\r\n                                    onClick={() => navigate(`/client-data/${client.id}`)}\r\n                                >\r\n                                    Dados Particulares\r\n                                </button>\r\n                            </li>\r\n                            <li>\r\n                                <button\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '8px',\r\n                                        background: '#dc3545',\r\n                                        color: '#fff',\r\n                                        border: 'none',\r\n                                        borderRadius: '4px',\r\n                                        fontWeight: 'bold'\r\n                                    }}\r\n                                    onClick={() => navigate('/')}\r\n                                >\r\n                                    Sair do Login\r\n                                </button>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Saudação ao cliente */}\r\n            <h1>Bom Treino!, {client.name}</h1>\r\n\r\n            {/* Linha dos nomes dos dias da semana como botões, bem separados */}\r\n            <div style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                gap: isMobile ? '10px' : '32px',\r\n                margin: '24px 0'\r\n            }}>\r\n                {daysOfWeek.map((day) => (\r\n                    <button\r\n                        key={day}\r\n                        onClick={() => setSelectedDay(day)}\r\n                        style={{\r\n                            background: selectedDay === day ? '#007bff' : '#e0e0e0',\r\n                            color: selectedDay === day ? '#fff' : '#333',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: isMobile ? '4px 8px' : '8px 18px',\r\n                            fontSize: isMobile ? '0.85rem' : '1.05rem',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            transition: 'background 0.2s'\r\n                        }}\r\n                    >\r\n                        {day.slice(0, 3)}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Resultados de bioimpedância - só aparece se showBioimpedance for true */}\r\n            {showBioimpedance && (\r\n                <div style={{\r\n                    position: 'absolute', top: 80, right: 24, zIndex: 10, display: 'flex', gap: 16\r\n                }}>\r\n                    {(client.bioimpedanceHistory || []).map((exam, idx) => (\r\n                        <div key={exam.date} className=\"card client-bioimpedance\">\r\n                            <h2>Exame {idx === 0 ? 'Mais Recente' : idx === 1 ? 'Anterior' : 'Primeiro'}</h2>\r\n                            <div style={{ fontSize: '0.95rem', color: '#555', marginBottom: 8 }}>\r\n                                Data: {new Date(exam.date).toLocaleDateString()}\r\n                            </div>\r\n                            <ul>\r\n                                <li>Peso: {exam.weight} kg</li>\r\n                                <li>Gordura Corporal: {exam.bodyFat} %</li>\r\n                                <li>Massa Muscular: {exam.muscleMass} kg</li>\r\n                                <li>Gordura Visceral: {exam.visceralFat}</li>\r\n                                <li>Água %: {exam.waterPercentage}</li>\r\n                                <li>Idade Metabólica: {exam.basalMetabolicRate}</li>\r\n                            </ul>\r\n                        </div>\r\n                    ))}\r\n                    <button\r\n                        style={{\r\n                            height: 40, alignSelf: 'flex-start', marginLeft: 8,\r\n                            padding: '6px 12px', background: '#007bff', color: '#fff',\r\n                            border: 'none', borderRadius: '4px', cursor: 'pointer'\r\n                        }}\r\n                        onClick={() => setShowBioimpedance(false)}\r\n                    >\r\n                        Fechar\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {/* Lista de treinos do cliente filtrados pelo dia selecionado */}\r\n            <div className=\"card client-workouts\">\r\n                <h2>Seus Treinos</h2>\r\n                {currentClient.workouts && currentClient.workouts.filter(w => w.day === selectedDay).length > 0 ? (\r\n                    currentClient.workouts\r\n                        .filter(w => w.day === selectedDay)\r\n                        .map((workout) => {\r\n                            const key = getWorkoutKey(workout);\r\n                            return (\r\n                                <div key={key} className=\"workout-item\">\r\n                                    <span className=\"workout-name\">{workout.name}</span>\r\n                                    {workout.description && (\r\n                                        <div style={{ fontSize: '0.9rem', color: '#555', marginTop: 2, marginBottom: 2 }}>\r\n                                            {workout.description}\r\n                                        </div>\r\n                                    )}\r\n                                    <img\r\n                                        className=\"workout-gif\"\r\n                                        src={workout.gif}\r\n                                        alt={workout.name}\r\n                                        style={{\r\n                                            width: 100,\r\n                                            height: 100,\r\n                                            objectFit: 'cover',\r\n                                            borderRadius: 8,\r\n                                            marginLeft: 8\r\n                                        }}\r\n                                    />\r\n                                    <button\r\n                                        onClick={() => startTimer(workout)}\r\n                                        disabled={timers[key] > 0 || completed[key]}\r\n                                        style={{\r\n                                            marginLeft: 8,\r\n                                            padding: isMobile ? '8px 3px' : '14px 12px', // <-- mais alto\r\n                                            fontSize: isMobile ? '0.65rem' : '0.85rem',\r\n                                            minWidth: isMobile ? 50 : 110,\r\n                                            background: completed[key]\r\n                                                ? '#dc3545'\r\n                                                : timers[key] > 0\r\n                                                ? '#ccc'\r\n                                                : '#28a745',\r\n                                            color: '#fff',\r\n                                            border: 'none',\r\n                                            borderRadius: '4px',\r\n                                            cursor:\r\n                                                timers[key] > 0 || completed[key]\r\n                                                    ? 'not-allowed'\r\n                                                    : 'pointer',\r\n                                            boxSizing: 'border-box'\r\n                                        }}\r\n                                    >\r\n                                        {completed[key]\r\n                                            ? 'concluído'\r\n                                            : timers[key] > 0\r\n                                            ? 'Em descanso...'\r\n                                            : 'concluir'}\r\n                                    </button>\r\n                                    {timers[key] > 0 && (\r\n                                        <span style={{ marginLeft: 8, color: '#28a745', fontWeight: 'bold' }}>\r\n                                            {timers[key]}s\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            );\r\n                        })\r\n                ) : (\r\n                    <p>Nenhum treino registrado para este dia.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClientPage;","// Importa React e hooks para manipular estado e navegação entre páginas\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n// Componente para adicionar treinos ao cliente\r\nconst AddWorkout = ({ clients, setClients }) => {\r\n  // Estado para armazenar o dia selecionado\r\n  const [selectedDay, setSelectedDay] = useState(null);\r\n  // Estado para armazenar a categoria selecionada\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  // Estado para controlar os dias que já têm treinos\r\n  const [daysWithWorkouts, setDaysWithWorkouts] = useState([]);\r\n  // Hook para navegação entre páginas\r\n  const navigate = useNavigate();\r\n  // Obtém o id do cliente da URL\r\n  const { clientId } = useParams();\r\n\r\n  // Busca o cliente pelo id\r\n  const client = clients.find((c) => c.id === parseInt(clientId));\r\n\r\n  // Se não encontrar o cliente, exibe mensagem\r\n  if (!client) {\r\n    return <h1>Cliente não encontrado</h1>;\r\n  }\r\n\r\n  // Lista de categorias de treino disponíveis\r\n  const categories = [\r\n    \"aerobico\",\r\n    \"abdomen\",\r\n    \"antebraço\",\r\n    \"bíceps\",\r\n    \"costas\",\r\n    \"glúteos\",\r\n    \"ombros\",\r\n    \"panturrilhas\",\r\n    \"peito\",\r\n    \"pernas\",\r\n    \"trapézio\",\r\n    \"tríceps\",\r\n  ];\r\n\r\n  // Função para retornar os gifs de cada categoria\r\n  const getGifsForCategory = (category) => {\r\n    const gifs = {\r\n      abdomen: [\r\n        \"Abdominal infra solo (abdominal invertido).gif\",\r\n        \"Abdominal-cruzado.gif\",\r\n        \"Abdominal-declinado.gif\",\r\n      ],\r\n      bíceps: [\r\n        \"Rosca direta com barra reta ou W.gif\",\r\n        \"Rosca martelo.gif\",\r\n        \"rosca-alternada.gif\",\r\n      ],\r\n    };\r\n    return gifs[category] || [];\r\n  };\r\n\r\n  // Função para selecionar o dia de treino\r\n  const handleDaySelection = (day) => {\r\n    setSelectedDay(day);\r\n    if (!daysWithWorkouts.includes(day)) {\r\n      setDaysWithWorkouts((prev) => [...prev, day]);\r\n    }\r\n  };\r\n\r\n  // Função para adicionar ou remover treino do cliente\r\n  const handleToggleWorkout = (gifName, checked) => {\r\n    let updatedClients;\r\n\r\n    if (checked) {\r\n      // Adiciona treino ao cliente\r\n      const workoutData = {\r\n        name: gifName.replace(\".gif\", \"\"),\r\n        gif: `/treinos/${selectedCategory}/${gifName}`,\r\n        day: selectedDay,\r\n        completed: false,\r\n      };\r\n      updatedClients = clients.map((c) =>\r\n        c.id === client.id\r\n          ? { ...c, workouts: [...(c.workouts || []), workoutData] }\r\n          : c\r\n      );\r\n    } else {\r\n      // Remove treino do cliente\r\n      updatedClients = clients.map((c) =>\r\n        c.id === client.id\r\n          ? {\r\n              ...c,\r\n              workouts: (c.workouts || []).filter(\r\n                (w) =>\r\n                  !(\r\n                    w.name === gifName.replace(\".gif\", \"\") &&\r\n                    w.day === selectedDay\r\n                  )\r\n              ),\r\n            }\r\n          : c\r\n      );\r\n    }\r\n\r\n    setClients(updatedClients);\r\n  };\r\n\r\n  // Renderização do componente\r\n  return (\r\n    <div className=\"add-workout-container\">\r\n      {/* Título da página */}\r\n      <h1>Adicionar Treinos para {client.name}</h1>\r\n\r\n      {/* Botão para voltar para página anterior */}\r\n      <button\r\n        onClick={() => navigate(-1)}\r\n        style={{ marginBottom: \"20px\", cursor: \"pointer\" }}\r\n      >\r\n        Voltar para Página do Cliente\r\n      </button>\r\n\r\n      {/* Seleção do dia de treino */}\r\n      {!selectedDay && (\r\n        <div>\r\n          <h2>Escolha o Dia de Treino</h2>\r\n          {[1, 2, 3, 4, 5].map((day) => (\r\n            <button\r\n              key={day}\r\n              onClick={() => handleDaySelection(day)}\r\n              className=\"day-button\"\r\n            >\r\n              Dia {day} {daysWithWorkouts.includes(day) && \"•\"}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Seleção da categoria de treino */}\r\n      {selectedDay && !selectedCategory && (\r\n        <div>\r\n          <h2>Escolha uma Categoria para o Dia {selectedDay}</h2>\r\n          {categories.map((category) => (\r\n            <button\r\n              key={category}\r\n              onClick={() => setSelectedCategory(category)}\r\n              className=\"category-button\"\r\n            >\r\n              {category.toUpperCase()}\r\n            </button>\r\n          ))}\r\n          <button\r\n            onClick={() => setSelectedDay(null)}\r\n            className=\"back-button\"\r\n          >\r\n            Voltar aos Dias\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Exibição dos treinos da categoria selecionada */}\r\n      {selectedCategory && (\r\n        <div>\r\n          <h2>{selectedCategory.toUpperCase()} - Dia {selectedDay}</h2>\r\n          <button\r\n            onClick={() => setSelectedCategory(null)}\r\n            className=\"back-button\"\r\n          >\r\n            Voltar às Categorias\r\n          </button>\r\n          <div className=\"workout-category\">\r\n            {getGifsForCategory(selectedCategory).map((gif) => {\r\n              // Verifica se o treino já está marcado para o cliente\r\n              const isChecked =\r\n                client.workouts?.some(\r\n                  (w) =>\r\n                    w.name === gif.replace(\".gif\", \"\") &&\r\n                    w.day === selectedDay\r\n                ) || false;\r\n\r\n              return (\r\n                <div key={gif} className=\"workout-item\">\r\n                  {/* Imagem do exercício */}\r\n                  <img\r\n                    src={`/treinos/${selectedCategory}/${gif}`}\r\n                    alt={gif.replace(\".gif\", \"\")}\r\n                  />\r\n                  {/* Nome do exercício */}\r\n                  <p>{gif.replace(\".gif\", \"\")}</p>\r\n                  {/* Checkbox para marcar/desmarcar treino */}\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={isChecked}\r\n                    onChange={(e) =>\r\n                      handleToggleWorkout(gif, e.target.checked)\r\n                    }\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Exporta o componente para uso em outras partes do projeto\r\nexport default AddWorkout;","// Componente simples para exibir a página do administrador\r\nconst AdminPage = () => {\r\n  // Renderiza o título da página do administrador\r\n  return <h1>Página do Administrador</h1>;\r\n};\r\n\r\n// Exporta o componente para uso em outras partes do projeto\r\nexport default AdminPage;","// Componente para exibir a galeria de imagens dos treinos\r\nconst ImageGallery = ({ workouts, onSelect, clientWorkouts, selectedDay }) => (\r\n  <ul className=\"workout-list\">\r\n    {workouts.map((workout) => {\r\n      // Verifica se o treino já foi adicionado para o cliente no dia selecionado\r\n      const alreadyAdded = clientWorkouts?.some(\r\n        (w) => w.name === workout.name && w.day === selectedDay\r\n      );\r\n      return (\r\n        <li key={workout.name} className=\"workout-list-item\">\r\n          {/* Botão para salvar o treino, desabilitado se já foi salvo */}\r\n          <button\r\n            onClick={() => onSelect(workout)}\r\n            disabled={alreadyAdded}\r\n            style={{\r\n              background: alreadyAdded ? 'green' : '#007bff',\r\n              color: '#fff',\r\n              cursor: alreadyAdded ? 'default' : 'pointer',\r\n              padding: '2px 6px',\r\n              fontSize: '0.8rem',\r\n              marginRight: '6px',\r\n            }}\r\n          >\r\n            {alreadyAdded ? 'Salvo' : 'Salvar'}\r\n          </button>\r\n          {/* Nome do exercício */}\r\n          <span className=\"workout-name\">{workout.name}</span>\r\n          {/* Imagem/gif do exercício */}\r\n          <img\r\n            src={workout.gif}\r\n            alt={workout.name}\r\n            className=\"workout-thumb\"\r\n            style={{ width: 50, height: 50, marginLeft: 8 }}\r\n          />\r\n        </li>\r\n      );\r\n    })}\r\n  </ul>\r\n);\r\n\r\n// Exporta o componente para uso em outras partes do projeto\r\nexport default ImageGallery;","// Exporta diretamente o objeto categories com os nomes dos arquivos de exercícios por grupo muscular\r\nexport const categories = {\r\n  aerobico: [\r\n    'Corrida esteira.gif',\r\n    'Bicicleta.gif',\r\n    'Pular-corda.gif',\r\n    'polichinelos.gif',\r\n  ],\r\n  abdomen: [\r\n    'Abdominal infra solo.gif',\r\n    'Abdominal-cruzado.gif',\r\n    'Abdominal-declinado.gif',\r\n    'Abdominal-infra-nas-paralelas.gif',\r\n    'abdominal-infra-solo2.gif',\r\n    'Abdominal-lateral.gif',\r\n    'abdominal-maquina.gif',\r\n    'abdominal-na-polia.gif',\r\n    'abdominal-remador.gif',\r\n    'abdominal-reto.gif',\r\n    'abdominal-roda.gif',\r\n    'Abdominal-tesoura.gif',\r\n    'Prancha abdominal.jpg',\r\n  ],\r\n  antebraço: [\r\n    'rolo-de-punho.gif',\r\n    'rosca-invertida-com-barra.gif',\r\n    'rosca-martelo-com-halteres.gif',\r\n    'rosca-punho-inversa.gif',\r\n    'rosca-zottman.gif',\r\n    'rusca-punho-com-barra.gif',\r\n    'suspensao-na-barra-dead-hang.gif',\r\n  ],\r\n  bíceps: [\r\n    'chinup-1.gif',\r\n    'Rosca direta barra reta ou W.gif',\r\n    'Rosca martelo.gif',\r\n    'rosca-alternada.gif',\r\n    'rosca-arrastada.gif',\r\n    'rosca-concentrada.gif',\r\n    'rosca-direta-polia.gif',\r\n    'rosca-inclinada.gif',\r\n    'rosca-scott.gif',\r\n    'rosca-simultanea.gif',\r\n    'rosca-spider.gif',\r\n    'rosca-zottman.gif',\r\n  ],\r\n  costas: [\r\n    'Barra fixa supinada.gif',\r\n    'Barra-fixa.gif',\r\n    'Encolhimento ombro.gif',\r\n    'Pull down.gif',\r\n    'Pulley costas.gif',\r\n    'Remada baixa.gif',\r\n    'Remada cavalinho.gif',\r\n    'Remada curvada.gif',\r\n    'Remada serrote.gif',\r\n    'Voador invertido.gif',\r\n  ],\r\n  glúteos: [\r\n    'Agachamento livre.gif',\r\n    'agachamento-barra-postura.gif',\r\n    'agachamento-com-barra.gif',\r\n    'avanco-com-halteras.gif',\r\n    'Coice quatro apoios.gif',\r\n    'coice-no-cabo.gif',\r\n    'Levantamento terra com barra.gif',\r\n    'Ponte com uma perna só.gif',\r\n    'ponte-para-gluteos.gif',\r\n    'Subida no step.gif',\r\n  ],\r\n  ombros: [\r\n    'Crucifixo invertido com halteres.gif',\r\n    'Desenvolvimento Arnold.gif',\r\n    'Desenvolvimento com barra.gif',\r\n    'Desenvolvimento com halteres.gif',\r\n    'Elevação frontal com barra.gif',\r\n    'Elevação frontal com halteres.gif',\r\n    'Elevação lateral com cabo.gif',\r\n    'Elevação lateral com halteres.gif',\r\n    'Elevação lateral inclinada.gif',\r\n    'Elevação lateral na polia.gif',\r\n    'Face pull.gif',\r\n  ],\r\n  panturrilhas: [\r\n    'Elevação  no leg press.gif',\r\n    'Elevação de  barra livre.gif',\r\n    'Elevação de  corpo.gif',\r\n    'Elevação pé na máquina.gif',\r\n    'Elevação sentado com halteres.gif',\r\n    'Elevação sentado na máquina.gif',\r\n  ],\r\n  peito: [\r\n    'Crucifixo.gif',\r\n    'Flexão de braço.gif',\r\n    'Paralelas.gif',\r\n    'Pullover com halteres.gif',\r\n    'Supino declinado (canadense).gif',\r\n    'Supino inclinado.gif',\r\n    'Supino máquina.gif',\r\n    'Supino reto.gif',\r\n    'Voador ou peck deck.gif',\r\n  ],\r\n  pernas: [\r\n    'Afundo.gif',\r\n    'Agachamento frontal.gif',\r\n    'Agachamento goblet.gif',\r\n    'Agachamento hack.gif',\r\n    'Agachamento livre.gif',\r\n    'Agachamento sumô.gif',\r\n    'agachamento-bulgaro.gif',\r\n    'barbell-good-morning.gif',\r\n    'Cadeira extensora.gif',\r\n    'Elevação pélvica com barra.gif',\r\n    'Flexão nórdica.gif',\r\n    'Leg press.gif',\r\n    'Levantamento terra romeno.gif',\r\n    'Levantamento terra sumô.gif',\r\n    'Mesa flexora.gif',\r\n    'Stiff.gif',\r\n  ],\r\n  trapézio: [\r\n    'depressao-escapular-na-puxada.gif',\r\n    'elevacao-halteres-banco-inclinado.gif',\r\n    'encolhimento-com-barra.gif',\r\n    'encolhimento-por-tras-smith.gif',\r\n    'face-pull-na-polia.gif',\r\n    'Levantamento terra.gif',\r\n    'remada-curvada-com-barra.gif',\r\n    'remada-em-pe-com-barra.gif',\r\n  ],\r\n  tríceps: [\r\n    'flexao-diamante.gif',\r\n    'paralelas-para-triceps.gif',\r\n    'rosca-testa-com-barra2.gif',\r\n    'supino-fechado-com-barra.gif',\r\n    'supino-fechado-com-barra.gif',\r\n    'triceps-banco.gif',\r\n    'triceps-coice.gif',\r\n    'triceps-corda-na-polia-alta.gif',\r\n    'triceps-frances-halter-sentado.gif',\r\n    'triceps-invertido.gif',\r\n    'triceps-na-polia-com-barra-reta.gif',\r\n  ],\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../styles/ManageClient.css';\r\nimport ImageGallery from '../components/ImageGallery';\r\nimport { categories } from \"../components/categories\";\r\n\r\n// Dias da semana para seleção de treinos\r\nconst daysOfWeek = [\r\n  'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira',\r\n  'Sexta-feira', 'Sábado', 'Domingo'\r\n];\r\n\r\n// Componente principal para gerenciar cliente\r\nconst ManageClient = ({ clients, setClients }) => {\r\n  // Obtém o id do cliente da URL\r\n  const { id } = useParams();\r\n  // Hook para navegação entre páginas\r\n  const navigate = useNavigate();\r\n  // Busca o cliente pelo id\r\n  const client = clients.find(c => c.id === parseInt(id));\r\n  // Se não encontrar o cliente, exibe mensagem\r\n  if (!client) {\r\n    return <h1>Cliente não encontrado</h1>;\r\n  }\r\n\r\n  // BLOQUEIO: retorna só a mensagem se passou de 45 dias desde o cadastro\r\n  if (client?.createdAt) {\r\n    const days = Math.floor((Date.now() - new Date(client.createdAt)) / (1000 * 60 * 60 * 24));\r\n    if (days > 45) {\r\n      return (\r\n        <div className=\"client-page\">\r\n          <h1 style={{ color: 'red', textAlign: 'center' }}>\r\n            Acesso bloqueado! Procure o administrador para renovar seu contrato.\r\n          </h1>\r\n          <button\r\n            style={{\r\n              background: '#28a745',\r\n              color: '#fff',\r\n              padding: '8px 16px',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              marginTop: '24px',\r\n              cursor: 'pointer',\r\n              fontWeight: 'bold'\r\n            }}\r\n            onClick={() => {\r\n              const updatedClients = clients.map(c =>\r\n                c.id === client.id\r\n                  ? { ...c, createdAt: new Date().toISOString() }\r\n                  : c\r\n              );\r\n              setClients(updatedClients);\r\n              alert('Contrato renovado por mais 45 dias!');\r\n            }}\r\n          >\r\n            Renovar contrato (+45 dias)\r\n          </button>\r\n          <button className=\"back-button\" onClick={() => navigate('/home')} style={{ marginTop: '16px' }}>\r\n            Voltar para Admin\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Estado para resultados de bioimpedância\r\n  const [bioimpedanceResults, setBioimpedanceResults] = useState(client?.bioimpedanceResults || {\r\n    weight: '',\r\n    bodyFat: '',\r\n    muscleMass: '',\r\n    visceralFat: '',\r\n    waterPercentage: '',\r\n    basalMetabolicRate: '',\r\n  });\r\n\r\n  // Estado para dia selecionado dos treinos\r\n  const [selectedDay, setSelectedDay] = useState(daysOfWeek[0]);\r\n  // Estado para categoria de treino selecionada\r\n  const [selectedCategory, setSelectedCategory] = useState('');\r\n  // Estado para treinos disponíveis da categoria\r\n  const [availableWorkouts, setAvailableWorkouts] = useState([]);\r\n  // Estado para treinos do cliente filtrados pelo dia\r\n  const [workouts, setWorkouts] = useState(\r\n    client.workouts?.filter(w => w.day === selectedDay) || []\r\n  );\r\n  // Estado para descrição do treino\r\n  const [workoutDescription, setWorkoutDescription] = useState('');\r\n\r\n  // Atualiza treinos quando o dia selecionado muda\r\n  useEffect(() => {\r\n    if (selectedDay) {\r\n      setWorkouts(client.workouts?.filter(w => w.day === selectedDay) || []);\r\n    } else {\r\n      setWorkouts(client.workouts || []);\r\n    }\r\n  }, [selectedDay, client.workouts]);\r\n\r\n  // Atualiza treinos quando a lista de clientes muda\r\n  useEffect(() => {\r\n    const updated = clients.find((c) => c.id === parseInt(id));\r\n    setWorkouts(updated?.workouts || []);\r\n  }, [clients, id]);\r\n\r\n  // Atualiza estado dos resultados de bioimpedância ao digitar\r\n  const handleBioimpedanceChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setBioimpedanceResults((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  // Salva resultados de bioimpedância no cliente\r\n  const handleSaveBioimpedance = (e) => {\r\n    e.preventDefault();\r\n    const updatedClients = clients.map((c) =>\r\n      c.id === client.id ? { ...c, bioimpedanceResults } : c\r\n    );\r\n    setClients(updatedClients);\r\n    alert('Resultados de bioimpedância salvos com sucesso!');\r\n  };\r\n\r\n  // Adiciona treino ao cliente\r\n  const handleAddWorkout = (workout) => {\r\n    if (!selectedDay) {\r\n      alert('Selecione o dia da semana antes de salvar o treino.');\r\n      return;\r\n    }\r\n    const workoutWithDay = { \r\n      ...workout, \r\n      day: selectedDay, \r\n      category: selectedCategory,\r\n      description: workoutDescription // <-- adiciona a descrição\r\n    };\r\n    const updatedClients = clients.map((c) =>\r\n      c.id === client.id\r\n        ? { ...c, workouts: [...(c.workouts || []), workoutWithDay] }\r\n        : c\r\n    );\r\n    setClients(updatedClients);\r\n    setWorkouts([...workouts, workoutWithDay]);\r\n    setWorkoutDescription(''); // limpa o campo após adicionar\r\n  };\r\n\r\n  // Função para trocar o dia selecionado\r\n  const handleDaySelection = (e) => {\r\n    setSelectedDay(e.target.value);\r\n    setSelectedCategory('');\r\n    setAvailableWorkouts([]);\r\n  };\r\n\r\n  // Função para trocar a categoria selecionada\r\n  const handleCategorySelection = (e) => {\r\n    setSelectedCategory(e.target.value);\r\n    const workoutsList = categories[e.target.value]?.map((image) => ({\r\n      name: image.replace(/\\.(gif|jpg|jpeg|png)$/, ''),\r\n      gif: `/treinos/${e.target.value}/${image}`,\r\n      category: e.target.value\r\n    })) || [];\r\n    setAvailableWorkouts(workoutsList);\r\n  };\r\n\r\n  // Remove treino do cliente\r\n  const handleRemoveWorkout = (workoutToRemove) => {\r\n    const updatedWorkouts = workouts.filter(\r\n      (w) =>\r\n        !(\r\n          w.name === workoutToRemove.name &&\r\n          w.day === workoutToRemove.day &&\r\n          w.category === workoutToRemove.category\r\n        )\r\n    );\r\n    setWorkouts(updatedWorkouts);\r\n    const updatedClients = clients.map((c) =>\r\n      c.id === client.id ? { ...c, workouts: updatedWorkouts } : c\r\n    );\r\n    setClients(updatedClients);\r\n  };\r\n\r\n  // Obtém as categorias dos treinos\r\n  const categorias = Object.keys(categories);\r\n\r\n  // Renderização do componente\r\n  return (\r\n    <div className=\"manage-client\">\r\n      {/* Título da página */}\r\n      <h1 className=\"client-title\">Gerenciar Cliente: {client.name}</h1>\r\n\r\n      {/* Caixa separada para Bioimpedância */}\r\n      <div className=\"card bioimpedance-section\">\r\n        <h2 className=\"section-title\">Adicionar Bioimpedância</h2>\r\n        <form className=\"bioimpedance-form\" onSubmit={handleSaveBioimpedance}>\r\n          <div className=\"bioimpedance-fields\">\r\n            <label>\r\n              Peso (kg):\r\n              <input\r\n                type=\"number\"\r\n                name=\"weight\"\r\n                value={bioimpedanceResults.weight}\r\n                onChange={handleBioimpedanceChange}\r\n                className=\"input\"\r\n              />\r\n            </label>\r\n            <label>\r\n              Gordura Corporal (%):\r\n              <input\r\n                type=\"number\"\r\n                name=\"bodyFat\"\r\n                value={bioimpedanceResults.bodyFat}\r\n                onChange={handleBioimpedanceChange}\r\n                className=\"input\"\r\n              />\r\n            </label>\r\n            <label>\r\n              Massa Muscular (kg):\r\n              <input\r\n                type=\"number\"\r\n                name=\"muscleMass\"\r\n                value={bioimpedanceResults.muscleMass}\r\n                onChange={handleBioimpedanceChange}\r\n                className=\"input\"\r\n              />\r\n            </label>\r\n            <label>\r\n              Gordura Visceral:\r\n              <input\r\n                type=\"number\"\r\n                name=\"visceralFat\"\r\n                value={bioimpedanceResults.visceralFat}\r\n                onChange={handleBioimpedanceChange}\r\n                className=\"input\"\r\n              />\r\n            </label>\r\n            <label>\r\n              Água (%):\r\n              <input\r\n                type=\"number\"\r\n                name=\"waterPercentage\"\r\n                value={bioimpedanceResults.waterPercentage}\r\n                onChange={handleBioimpedanceChange}\r\n                className=\"input\"\r\n              />\r\n            </label>\r\n            <label>\r\n              Idade Metabólica:\r\n              <input\r\n                type=\"number\"\r\n                name=\"basalMetabolicRate\"\r\n                value={bioimpedanceResults.basalMetabolicRate}\r\n                onChange={handleBioimpedanceChange}\r\n                className=\"input\"\r\n              />\r\n            </label>\r\n          </div>\r\n          <button className=\"form-button\" type=\"submit\">Salvar Bioimpedância</button>\r\n        </form>\r\n      </div>\r\n\r\n      {/* Caixa separada para Treinos */}\r\n      <div className=\"card workouts-section\">\r\n        <h2 className=\"section-title\">Adicionar Treinos</h2>\r\n        <label className=\"form-label\">\r\n          Selecione o Dia da Semana:\r\n          <select className=\"form-input\" value={selectedDay} onChange={handleDaySelection}>\r\n            <option value=\"\">Selecione</option>\r\n            {daysOfWeek.map((day) => (\r\n              <option key={day} value={day}>{day}</option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n\r\n        {/* Seleção da categoria de treino */}\r\n        {selectedDay && (\r\n          <>\r\n            <label className=\"form-label\">\r\n              Selecione a Categoria:\r\n              <select className=\"form-input\" value={selectedCategory} onChange={handleCategorySelection}>\r\n                <option value=\"\">Selecione</option>\r\n                {Object.keys(categories).map((category) => (\r\n                  <option key={category} value={category}>{category}</option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n\r\n            {/* Exibe treinos disponíveis da categoria */}\r\n            {selectedCategory && (\r\n              <div className=\"available-workouts\">\r\n                <h3 className=\"section-title\">Treinos Disponíveis</h3>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Ex: 4x12 ou 3x15\"\r\n                  value={workoutDescription}\r\n                  onChange={e => setWorkoutDescription(e.target.value)}\r\n                  style={{\r\n                    margin: '8px 0',\r\n                    padding: '6px',\r\n                    width: '100%',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid #ccc'\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {/* Renderização das imagens dos treinos disponíveis */}\r\n        {availableWorkouts.length > 0 && (\r\n          <ImageGallery\r\n            workouts={availableWorkouts}\r\n            onSelect={handleAddWorkout}\r\n            clientWorkouts={workouts}\r\n            selectedDay={selectedDay}\r\n          />\r\n        )}\r\n\r\n        {/* Lista de treinos já registrados */}\r\n        <h3 className=\"registered-workouts-title\">Treinos Registrados</h3>\r\n        {categorias.map((cat) => {\r\n          const treinosDaCategoria = workouts.filter(w => w.category === cat);\r\n          if (treinosDaCategoria.length === 0) return null;\r\n          return (\r\n            <div className=\"subcard category-group\" key={cat}>\r\n              <h4>{cat.charAt(0).toUpperCase() + cat.slice(1)}</h4>\r\n              <ul className=\"workouts-list\">\r\n                {treinosDaCategoria.map((workout, idx) => {\r\n                  const globalIndex = workouts.findIndex(\r\n                    w => w.name === workout.name && w.day === workout.day && w.category === workout.category\r\n                  );\r\n                  return (\r\n                    <li className=\"workout-item\" key={idx}>\r\n                      <span className=\"workout-name\">{workout.name}</span>\r\n                      <img className=\"workout-gif\" src={workout.gif} alt={workout.name} />\r\n                      {workout.description && (\r\n                        <div style={{ fontSize: '0.9rem', color: '#555', marginTop: 4 }}>\r\n                          {workout.description}\r\n                        </div>\r\n                      )}\r\n                      <button\r\n                        className=\"remove-button\"\r\n                        onClick={() => handleRemoveWorkout(workout)}\r\n                        style={{\r\n                          marginLeft: 8,\r\n                          padding: '2px 6px',\r\n                          fontSize: '0.8rem',\r\n                          background: '#dc3545',\r\n                          color: '#fff',\r\n                          border: 'none',\r\n                          borderRadius: '4px',\r\n                          cursor: 'pointer'\r\n                        }}\r\n                      >\r\n                        Remover\r\n                      </button>\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {/* Botão para voltar para página de admin */}\r\n      <button className=\"back-button\" onClick={() => navigate('/home')}>Voltar para Admin</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageClient;\r\n","const clientsDB = [\r\n  {\r\n    id: 1,\r\n    name: \"Wal Ribeiro\",\r\n    email: \"wal@gmail.com\",\r\n    password: \"wal123\",\r\n    bioimpedanceResults: {\r\n      weight: 65,\r\n      bodyFat: 22,\r\n      muscleMass: 28,\r\n      visceralFat: 8,\r\n      waterPercentage: 55,\r\n      basalMetabolicRate: 1400,\r\n    },\r\n    workouts: [\r\n      {\r\n        name: \"Supino Reto\",\r\n        day: \"Segunda-feira\",\r\n        category: \"peito\",\r\n        description: \"4x12\",\r\n        gif: \"/treinos/peito/supino-reto.gif\"\r\n      }\r\n    ],\r\n    createdAt: \"2024-08-19T12:00:00Z\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Hingredy Reiro\",\r\n    email: \"hingredy@gmail.com\",\r\n    password: \"Hingredy123\",\r\n    bioimpedanceResults: {\r\n      weight: \"\",\r\n      bodyFat: \"\",\r\n      muscleMass: \"\",\r\n      visceralFat: \"\",\r\n      waterPercentage: \"\",\r\n      basalMetabolicRate: \"\",\r\n    },\r\n    workouts: [],\r\n    createdAt: \"2024-08-19T12:00:00Z\"\r\n  }\r\n  // ...outros clientes\r\n];\r\n\r\nexport default clientsDB;","// Importa React e hooks para estado e efeitos colaterais\nimport React, { useEffect, useState } from 'react';\n// Importa componentes de roteamento do React Router\nimport { BrowserRouter as Router, Routes, Route, useLocation } from 'react-router-dom';\n// Importa as páginas do projeto\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport ClientPage from './pages/ClientPage';\nimport AddWorkout from './pages/AddWorkout';\nimport AdminPage from './pages/AdminPage';\nimport ManageClient from './pages/ManageClient';\n// Importa o arquivo de estilos principal\nimport './styles/main.css';\n// Importa o banco de dados de clientes\nimport clientsDB from './data/clientsDB';\n\n// Componente que gerencia as rotas e troca de estilos de página\nfunction AppContent({ clients, setClients, adminCredentials }) {\n    // Hook para obter a localização atual da rota\n    const location = useLocation();\n\n    // Altera a classe do body conforme a rota (login ou padrão)\n    useEffect(() => {\n        if (location.pathname === '/') {\n            document.body.className = 'login-page';\n        } else {\n            document.body.className = 'default-page';\n        }\n    }, [location]);\n\n    // Define as rotas da aplicação\n    return (\n        <div>\n            <Routes>\n                {/* Rota para página de login */}\n                <Route path=\"/\" element={<Login clients={clients} adminCredentials={adminCredentials} />} />\n                {/* Rota para página inicial/home */}\n                <Route path=\"/home\" element={<Home clients={clients} setClients={setClients} />} />\n                {/* Rota para página do cliente */}\n                <Route path=\"/client/:id\" element={<ClientPage clients={clients} setClients={setClients} workouts={[]} />} />\n                {/* Rota para adicionar treino ao cliente */}\n                <Route path=\"/add-workout/:clientId\" element={<AddWorkout clients={clients} setClients={setClients} />}/>\n                {/* Rota para página do administrador */}\n                <Route path=\"/admin\" element={<AdminPage clients={clients} setClients={setClients} />} />\n                {/* Rota para gerenciar cliente */}\n                <Route path=\"/manage-client/:id\" element={<ManageClient clients={clients} setClients={setClients} />} />\n            </Routes>\n        </div>\n    );\n}\n\n// Componente principal da aplicação\nfunction App() {\n    // Estado para lista de clientes, inicializado do localStorage se existir\n    const [clients, setClients] = useState(() => {\n        const saved = localStorage.getItem('clients');\n        return saved ? JSON.parse(saved) : clientsDB;\n    });\n\n    // Salva a lista de clientes no localStorage sempre que ela muda\n    useEffect(() => {\n        localStorage.setItem('clients', JSON.stringify(clients));\n    }, [clients]);\n\n    // Credenciais do administrador (fixas para exemplo)\n    const adminCredentials = {\n        email: 'admin@example.com',\n        password: 'admin123',\n    };\n\n    // Renderiza o roteador e o conteúdo das rotas\n    return (\n        <Router>\n            <AppContent clients={clients} setClients={setClients} adminCredentials={adminCredentials} />\n        </Router>\n    );\n}\n\n// Exporta o componente principal para uso no projeto\nexport default App;","// Importa o React para criar componentes\r\nimport React from 'react';\r\n// Importa o ReactDOM para renderizar o app na DOM\r\nimport ReactDOM from 'react-dom/client';\r\n// Importa o componente principal da aplicação\r\nimport App from './App';\r\n// Importa o arquivo de estilos principal\r\nimport './styles/main.css';\r\n\r\n// Cria a raiz do React na div com id 'root'\r\nconst root = ReactDOM.createRoot(document.getElementById('root')); // Certifique-se de que o ID seja 'root'\r\n\r\n// Renderiza o componente App dentro do React.StrictMode para checagem de boas práticas\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);"],"sourceRoot":""}